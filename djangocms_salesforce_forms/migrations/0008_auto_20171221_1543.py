# -*- coding: utf-8 -*-
# Generated by Django 1.10.8 on 2017-12-21 15:43
from __future__ import unicode_literals
from functools import partial

from django.db import migrations
from django.db import models

from treebeard.numconv import NumConv


STEPLEN = 4
ALPHABET = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'
NUM = NumConv(len(ALPHABET), ALPHABET)


def _int2str(num):
    return NUM.int2str(num)


def _str2int(num):
    return NUM.str2int(num)


def get_descendants(model, node, db_alias):
    descendants = (
        model
        .objects
        .using(db_alias)
        .filter(
            path__startswith=node.path,
            depth__gte=node.depth,
        )
        .exclude(pk=node.pk)
    )
    return descendants


def get_instance_for_model(model, instance, exclude=None):
    if exclude is None:
        exclude = []

    fields = [field.name for field in instance._meta.local_fields
              if field.name not in exclude]
    new_instance = model()

    for field in fields:
        value = getattr(instance, field)
        setattr(new_instance, field, value)
    return new_instance


def get_instance_for_plugin(model, instance):
    new_plugin = get_instance_for_model(model, instance)

    for attr in ('parent_id', 'placeholder', 'language', 'plugin_type', 'creation_date', 'depth', 'path',
                 'numchild', 'pk', 'position'):
        setattr(new_plugin, attr, getattr(instance, attr))
    return new_plugin


def forward_migration(apps, schema_editor):
    db_alias = schema_editor.connection.alias

    # django CMS models
    CMSPlugin = apps.get_model('cms', 'CMSPlugin')

    # SalesForce models
    S_FormPlugin = apps.get_model('djangocms_salesforce_forms', 'FormPlugin')
    S_FieldsetPlugin = apps.get_model('djangocms_salesforce_forms', 'FieldsetPlugin')
    S_FieldPlugin = apps.get_model('djangocms_salesforce_forms', 'FieldPlugin')
    S_TextFieldPlugin = apps.get_model('djangocms_salesforce_forms', 'TextFieldPlugin')
    S_TextAreaFieldPlugin = apps.get_model('djangocms_salesforce_forms', 'TextAreaFieldPlugin')
    S_FormButtonPlugin = apps.get_model('djangocms_salesforce_forms', 'FormButtonPlugin')

    # Aldryn models
    A_FieldsetPlugin = apps.get_model('aldryn_forms', 'FieldsetPlugin')
    A_FieldPlugin = apps.get_model('aldryn_forms', 'FieldPlugin')
    A_EmailFieldPlugin = apps.get_model('aldryn_forms', 'EmailFieldPlugin')
    A_TextAreaFieldPlugin = apps.get_model('aldryn_forms', 'TextAreaFieldPlugin')
    A_Option = apps.get_model('aldryn_forms', 'Option')
    A_FormButtonPlugin = apps.get_model('aldryn_forms', 'FormButtonPlugin')

    add_child_handler = MP_AddChildHandler(apps, using=db_alias)

    for form_plugin in S_FormPlugin.objects.all():
        get_form_descendants = partial(get_descendants, node=form_plugin, db_alias=db_alias)

        # fieldsets
        fieldsets = get_form_descendants(S_FieldsetPlugin)

        for fieldset in fieldsets:
            new_fieldset = get_instance_for_plugin(A_FieldsetPlugin, instance=fieldset)
            fieldset.delete(keep_parents=True)
            new_fieldset.save(using=db_alias)

        # generic field plugins
        field_plugins = get_form_descendants(S_FieldPlugin)

        for field_plugin in field_plugins:
            options = list(field_plugin.option_set.all())
            new_field_plugin = get_instance_for_plugin(A_FieldPlugin, instance=field_plugin)
            field_plugin.delete(keep_parents=True)
            new_field_plugin.save(using=db_alias)

            for option in options:
                new_option = get_instance_for_model(A_Option, instance=option, exclude='field')
                new_option.field = new_field_plugin
                new_option.save(using=db_alias)

        # text field plugins
        types_to_plugin = {
            'text': 'TextField',
            'email': 'EmailField',
            'number': 'NumberField',
            'phone': 'PhoneField',
            'hidden': 'HiddenField',
        }
        text_field_plugins = get_form_descendants(S_TextFieldPlugin)

        for text_field_plugin in text_field_plugins:
            if text_field_plugin.type == 'email':
                new_field_plugin = get_instance_for_plugin(A_EmailFieldPlugin, instance=text_field_plugin)
            else:
                new_field_plugin = get_instance_for_plugin(A_FieldPlugin, instance=text_field_plugin)
            new_field_plugin.plugin_type = types_to_plugin[text_field_plugin.type]
            text_field_plugin.delete(keep_parents=True)
            new_field_plugin.save(using=db_alias)

        # text area field plugins
        text_area_field_plugins = get_form_descendants(S_TextAreaFieldPlugin)

        for text_area_field_plugin in text_area_field_plugins:
            new_text_area_field_plugin = get_instance_for_plugin(A_TextAreaFieldPlugin, instance=text_area_field_plugin)
            text_area_field_plugin.delete(keep_parents=True)
            new_text_area_field_plugin.save(using=db_alias)

        # button plugins
        button_plugins = get_form_descendants(S_FormButtonPlugin)

        for button_plugin in button_plugins:
            new_button_plugin = get_instance_for_plugin(A_FormButtonPlugin, instance=button_plugin)
            button_plugin.delete(keep_parents=True)
            new_button_plugin.save(using=db_alias)

        plugin_children = form_plugin.cmsplugin_set.filter(language=form_plugin.language)
        plugin_tree_order = list(
            plugin_children
            .order_by('position')
            .values_list('pk', flat=True)
        )

        # hidden fields
        position_counter = 0
        for name, value in form_plugin.hidden_fields.items():
            plugin = CMSPlugin(
                parent=form_plugin.cmsplugin_ptr,
                placeholder=form_plugin.placeholder,
                language=form_plugin.language,
                plugin_type='HiddenField',
                position=(form_plugin.cmsplugin_set.count() + 1),
            )
            # Create the hidden field plugin instances
            plugin = add_child_handler.process(form_plugin.cmsplugin_ptr, plugin)
            bound_plugin = get_instance_for_plugin(A_FieldPlugin, instance=plugin)
            bound_plugin.name = name
            bound_plugin.initial_value = value
            bound_plugin.save(using=db_alias)
            plugin_tree_order.insert(position_counter, bound_plugin.pk)
            position_counter += 1

        # Move all hidden fields to the top of the form.
        # Just for consistency.
        plugins = plugin_children.filter(pk__in=plugin_tree_order)

        for plugin in plugins.iterator():
            position = plugin_tree_order.index(plugin.pk)
            CMSPlugin.objects.using(db_alias).filter(pk=plugin.pk).update(position=position)


class Migration(migrations.Migration):

    dependencies = [
        ('cms', '0016_auto_20160608_1535'),
        ('aldryn_forms', '0010_auto_20171220_1733'),
        ('djangocms_salesforce_forms', '0007_auto_20171219_1033'),
    ]

    operations = [
        migrations.RunPython(forward_migration, migrations.RunPython.noop),
        migrations.AddField(
            model_name='formplugin',
            name='storage_backend',
            field=models.CharField(choices=[], default='default',
                                   max_length=15, verbose_name='Storage backend'),
        ),
    ]


class MP_AddChildHandler(object):

    def __init__(self, apps, using='default'):
        self.plugin_class = apps.get_model('cms', 'CMSPlugin')
        self.using = using
        self.apps = apps

    def _get_path(self, parent_node, depth, newstep):
        """
        Builds a path given some values

        :param parent_node: the parent node
        :param depth: the depth of the  node
        :param newstep: the value (integer) of the new step
        """
        parentpath = parent_node.path[0:depth * STEPLEN]
        key = _int2str(newstep)
        return '{0}{1}{2}'.format(
            parentpath,
            ALPHABET[0] * (STEPLEN - len(key)),
            key
        )

    def _get_children_path_interval(self, path):
        """
        returns: An interval of all possible children paths for a node.
        """
        return (path + ALPHABET[0] * STEPLEN, path + ALPHABET[-1] * STEPLEN)

    def _inc_path(self, obj):
        """
        returns: The path of the next sibling of a given node path.
        """
        newpos = _str2int(obj.path[-STEPLEN:]) + 1
        key = _int2str(newpos)
        if len(key) > STEPLEN:
            raise Exception("Path Overflow from: '%s'" % (obj.path,))
        return '{0}{1}{2}'.format(
            obj.path[:-STEPLEN],
            ALPHABET[0] * (STEPLEN - len(key)),
            key
        )

    def get_children(self, parent_node):
        return self.plugin_class.objects.using(self.using).filter(
            depth=parent_node.depth + 1,
            path__range=self._get_children_path_interval(parent_node.path)
        )

    def get_last_child(self, parent_node):
        children = self.get_children(parent_node)

        try:
            return children.order_by('path').reverse()[0]
        except IndexError:
            return None

    def process(self, parent_node, child_node):
        last_child = self.get_last_child(parent_node)

        child_node.depth = parent_node.depth + 1

        if last_child:
            # adding the new child as the last one
            child_node.path = self._inc_path(last_child)
        else:
            # the node had no children, adding the first child
            child_node.path = self._get_path(parent_node, child_node.depth, 1)
        # saving the instance before returning it
        child_node.save(using=self.using)

        (self.plugin_class
         .objects
         .using(self.using)
         .filter(path=parent_node.path)
         .update(numchild=models.F('numchild')+1))

        # we increase the numchild value of the object in memory
        parent_node.numchild += 1
        return child_node
